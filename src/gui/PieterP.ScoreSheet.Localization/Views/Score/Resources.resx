<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address_Title" xml:space="preserve">
    <value>ADDRESS</value>
  </data>
  <data name="Comments_Title" xml:space="preserve">
    <value>OPTIONAL REMARKS</value>
  </data>
  <data name="CompetitiveMatchInfo_Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="CompetitiveMatchInfo_Level" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="CompetitiveMatchInfo_MatchId" xml:space="preserve">
    <value>Match Nbr</value>
  </data>
  <data name="CompetitiveMatchInfo_Series" xml:space="preserve">
    <value>Series</value>
  </data>
  <data name="CompetitiveMatchInfo_StartHour" xml:space="preserve">
    <value>Starting time</value>
  </data>
  <data name="CompetitiveMatchInfo_StopHour" xml:space="preserve">
    <value>End of match</value>
  </data>
  <data name="CompetitiveMatchType_Cup" xml:space="preserve">
    <value>Cup</value>
  </data>
  <data name="CompetitiveMatchType_Interclub" xml:space="preserve">
    <value>Interclub</value>
  </data>
  <data name="CompetitiveMatchType_Men" xml:space="preserve">
    <value>Men</value>
  </data>
  <data name="CompetitiveMatchType_Super" xml:space="preserve">
    <value>Super</value>
  </data>
  <data name="CompetitiveMatchType_Veterans" xml:space="preserve">
    <value>Veterans</value>
  </data>
  <data name="CompetitiveMatchType_Women" xml:space="preserve">
    <value>Women</value>
  </data>
  <data name="CompetitiveMatchType_Youth" xml:space="preserve">
    <value>Youth</value>
  </data>
  <data name="CompetitiveMatch_Agreed2v2" xml:space="preserve">
    <value>Agree to play the matches two by two</value>
  </data>
  <data name="CompetitiveMatch_Article632" xml:space="preserve">
    <value>(article 6.32)</value>
  </data>
  <data name="CompetitiveMatch_AwayCaptain" xml:space="preserve">
    <value>CAPTAIN VISITORS</value>
  </data>
  <data name="CompetitiveMatch_AwayTeam" xml:space="preserve">
    <value>VISITORS</value>
  </data>
  <data name="CompetitiveMatch_ChiefReferee" xml:space="preserve">
    <value>CHIEF REFEREE</value>
  </data>
  <data name="CompetitiveMatch_HomeCaptain" xml:space="preserve">
    <value>CAPTAIN HOME TEAM</value>
  </data>
  <data name="CompetitiveMatch_HomeTeam" xml:space="preserve">
    <value>HOME TEAM</value>
  </data>
  <data name="CompetitiveMatch_RoomCommissioner" xml:space="preserve">
    <value>ROOM COMMISSIONER</value>
  </data>
  <data name="CompetitiveMatch_Yes" xml:space="preserve">
    <value>yes</value>
  </data>
  <data name="DoublePlayerInfo_Double" xml:space="preserve">
    <value>Double:</value>
  </data>
  <data name="PersonDetails_AffiliateNumber" xml:space="preserve">
    <value>Affiliate number:</value>
  </data>
  <data name="PersonDetails_Club" xml:space="preserve">
    <value>Club:</value>
  </data>
  <data name="PersonDetails_ClubId" xml:space="preserve">
    <value>Clubnr:</value>
  </data>
  <data name="PersonDetails_Name" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="ScoreHeader_Matches" xml:space="preserve">
    <value>MATCHES</value>
  </data>
  <data name="ScoreHeader_Points" xml:space="preserve">
    <value>POINTS</value>
  </data>
  <data name="ScoreHeader_Sets" xml:space="preserve">
    <value>SETS</value>
  </data>
  <data name="ScoreHeader_Title" xml:space="preserve">
    <value>MATCH ORDER</value>
  </data>
  <data name="SubstitutePlayerInfo_Substitute" xml:space="preserve">
    <value>Substitute:</value>
  </data>
  <data name="SuspectSemantics_FFDesc" xml:space="preserve">
    <value>the player gives up after the game has already started</value>
  </data>
  <data name="SuspectSemantics_Number" xml:space="preserve">
    <value>(number)</value>
  </data>
  <data name="SuspectSemantics_NumberDesc" xml:space="preserve">
    <value>the score of the player</value>
  </data>
  <data name="SuspectSemantics_Title" xml:space="preserve">
    <value>VALID INPUT</value>
  </data>
  <data name="SuspectSemantics_Warning" xml:space="preserve">
    <value>Pay attention to the semantics of 'FF' and 'WO'. Forfait (FF) means that the match has started, but one of the players has given up. In this case, the other player is awarded the match as a win match. A Walk Over (WO) means that the match has not been played. In this case, the match does not count as an individual victory. An FF can therefore occur in any set (but no more than once per match). A WO can only occur in the first set of the competition.</value>
  </data>
  <data name="SuspectSemantics_WODesc" xml:space="preserve">
    <value>the game was not played (and does not count as an individual victory); a WO may only occur in the first set</value>
  </data>
  <data name="TeamInfo_Captain" xml:space="preserve">
    <value>Cap-
tain</value>
  </data>
  <data name="TeamInfo_ClubId" xml:space="preserve">
    <value>Club Id</value>
  </data>
  <data name="TeamInfo_ComputerNumber" xml:space="preserve">
    <value>Computer
number</value>
  </data>
  <data name="TeamInfo_Forfeit" xml:space="preserve">
    <value>FF</value>
  </data>
  <data name="TeamInfo_Index" xml:space="preserve">
    <value>Index</value>
  </data>
  <data name="TeamInfo_Position" xml:space="preserve">
    <value>Pos
ition</value>
  </data>
  <data name="TeamInfo_Ranking" xml:space="preserve">
    <value>Rank</value>
  </data>
  <data name="TeamInfo_Team" xml:space="preserve">
    <value>Team</value>
  </data>
  <data name="TeamInfo_Wins" xml:space="preserve">
    <value>Ind.
wins</value>
  </data>
</root>